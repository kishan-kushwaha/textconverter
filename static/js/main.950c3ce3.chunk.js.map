{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","replace","word","first","charAt","slice","document","getElementById","select","navigator","clipboard","writeText","trim","length","split","defaultProps","aboutText","Alert","alert","role","lower","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.950c3ce3.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props){\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              </li> */}\r\n              </ul>\r\n            {/* {<form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n            </form>} */}\r\n\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode}type=\"checkbox\"  id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = { \r\n    title : PropTypes.string.isRequired,\r\n    aboutText : PropTypes.string.isRequired,\r\n}  \r\n\r\n// Specifies the default values for props:\r\nNavbar.defaultProps = {\r\n  title: 'set title here',\r\n  aboutText : \" text here\"\r\n};","import React, { useState } from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handUpClick = () =>{\r\n        console.log(\"Uppercase was clicked: \" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Uppercase!\",\"success\");\r\n }\r\n\r\n    const handloClick = () =>{\r\n       // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowercase!\",\"success\");\r\n    }\r\n\r\n    const handclearClick = () =>{\r\n        //console.log(\"Uppercase was clicked\" + text);\r\n        let newText = '';\r\n        setText(newText)\r\n        props.showAlert(\"Clear Text!\",\"success\");\r\n    }\r\n\r\n    //Capital every letter of every word\r\n    const handcapitalClick = () =>{\r\n        //console.log(\"Uppercase was clicked\" + text);\r\n        \r\n        function toTitleCase(str) {\r\n            return str.replace(/[^-'\\s]+/g, function(word) {\r\n                return word.replace(/^./, function(first) {\r\n                return first.toUpperCase();\r\n                });\r\n            });\r\n        }\r\n        let newText = toTitleCase(text);\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Capital Text!\",\"success\");\r\n    }\r\n\r\n    \r\n    const handtitleClick = () =>{\r\n        //console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.charAt(0).toUpperCase() + text.slice(1);\r\n        setText(newText)\r\n        props.showAlert(\"Converted to titlecase!\",\"success\");\r\n    }\r\n\r\n    const handCopy = () =>{\r\n        //console.log(\"Uppercase was clicked\" + text);\r\n        let newText = document.getElementById(\"myBox\");\r\n        newText.select();\r\n        navigator.clipboard.writeText(newText.value);\r\n        //setText(newText);\r\n        props.showAlert(\"Copy text!\",\"success\");\r\n    }\r\n\r\n    // const handExtraSpace = () =>{\r\n    //     //console.log(\"Uppercase was clicked\" + text);\r\n    //     let newText = text.split(/[]+/);\r\n    //     setText(newText.join(\" \"));\r\n    // }\r\n    const handRemoveSpace = () =>{\r\n        //console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.replace(/\\s+/g,' ').trim();\r\n        setText(newText)\r\n        props.showAlert(\"Remove extra spaces!\",\"success\");\r\n    }\r\n\r\n\r\n\r\n    const handleOnChange = (event) =>{\r\n        console.log(\"on changed\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    \r\n    const [text, setText] = useState('');\r\n    //text = \"new text\"; //wrong way of change the state\r\n    //setText(\"new text\")  //correct way of change the state\r\n    return (\r\n        <>\r\n        \r\n        <div className=\"container\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n             <h1>{props.heading}</h1>\r\n             <div className=\"mb-3\">\r\n                 <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'grey':'light', color:props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n             </div>\r\n             <button className=\"btn btn-primary mx-2\" onClick={handUpClick}>Convert to Uppercase</button>\r\n             <button className=\"btn btn-primary mx-2\" onClick={handloClick}>Convert to lowercase</button>\r\n             <button className=\"btn btn-primary mx-2\" onClick={handclearClick}>Clear text</button>\r\n             <button className=\"btn btn-primary mx-2\" onClick={handcapitalClick}>Captilized </button>\r\n             <button className=\"btn btn-primary mx-2\" onClick={handtitleClick}>Title </button>\r\n             <button className=\"btn btn-primary mx-2\" onClick={handCopy}>Copy text </button>\r\n             {/* <button className=\"btn btn-primary mx-2\" onClick={handExtraSpace}>Remove Extra Space </button> */}\r\n             <button className=\"btn btn-primary mx-2\" onClick={handRemoveSpace}>Remove Extra Space </button>\r\n        </div>\r\n\r\n        <div className=\"container my-3 \" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n        <h1>Your Text Summary</h1>\r\n        {/* <p>{text.split(\" \").length} words and {text.length} charcters</p> */}\r\n        <p> {text.length > 0?text.trim().split(\" \").length:0} words and {text.length} charcters</p>\r\n        <p>{ (0.008 * text.split(\" \").length)} Minutes read</p>\r\n        <h2>Preview</h2>\r\n\r\n        <p>{text.length > 0 ?text:\"Enter something in the text box to preview it here\"}</p>\r\n\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'  //rfce\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n       \r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n            \r\n            </div>\r\n       \r\n    )\r\n}\r\n\r\nexport default Alert\r\n","//import logo from './logo.svg';\nimport './App.css';\n//import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'    //imrs\nimport Alert from './components/Alert';\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\n\n//let name = \"Rajat\";\nfunction App() {\n  const [mode, setMode] = useState('light'); //whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(()=> {\n      setAlert(null);\n    },1500);\n  }\n\n  const toggleMode = ()=>{\n        if(mode === 'light')\n        {\n          setMode('dark');\n          document.body.style.backgroundColor = '#042743'\n          showAlert(\"Dark mode has been enabled\",\"success\");\n          document.title = \"Textutilis - Dark Mode\";\n\n          // setInterval(()=>{\n          //   document.title = \" Textutilis is amazing\";\n          // },2000);\n\n          // setInterval(()=>{\n          //   document.title = \" Install Textutilis Now\";\n          // },1500);\n        }\n        else\n        {\n          setMode('light');\n          document.body.style.backgroundColor = 'white'\n          showAlert(\"Light mode has been enabled\",\"success\");\n          document.title = \"Textutilis - Light Mode\";\n        }\n\n\n  }\n\n\n\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"Textutilis\" aboutText=\"About\" mode = {mode}  toggleMode={toggleMode}/>\n    <Alert alert={alert} />\n    <div className=\"container my-3 \">\n      {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n    {/* <Switch> */}\n      {/* /users -- component 1\n      /users/home --- component 2 */}\n      {/* <Route exact path=\"/about\">\n        <About />\n      </Route>\n     \n      <Route exact path=\"/\"> */}\n      <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode = {mode}/>\n        \n      {/* </Route>\n    </Switch> */}\n{/*     \n    <About title=\"About\"/>  */}\n    </div>\n    {/* </Router> */}\n    \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}